// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  sector    String?
  logo      String?  @db.Text // URL or base64 string for company logo
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  projects  Project[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Project {
  id          Int             @id @default(autoincrement())
  user        User            @relation(fields: [userId], references: [id])
  userId      Int
  company     Company         @relation(fields: [companyId], references: [id])
  companyId   Int
  name        String
  description String?
  budget      Float
  spent       Float           @default(0)
  status      String          @default("active")
  startDate   DateTime
  endDate     DateTime?
  progress    Int             @default(0)
  createdAt   DateTime        @default(now())
  budgetCategories BudgetCategory[]
}

model BudgetCategory {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  title     String
  subtitles BudgetSubtitle[]
  createdAt DateTime @default(now())
}

model BudgetSubtitle {
  id               Int            @id @default(autoincrement())
  budgetCategory   BudgetCategory @relation(fields: [budgetCategoryId], references: [id])
  budgetCategoryId Int
  name             String
  amount           Float
  spent            Float          @default(0)
  spentDate        DateTime?
  createdAt        DateTime       @default(now())
  spendingHistory  SpendingRecord[]
}

model SpendingRecord {
  id               Int            @id @default(autoincrement())
  budgetSubtitle   BudgetSubtitle @relation(fields: [budgetSubtitleId], references: [id])
  budgetSubtitleId Int
  amount           Float
  reason           String
  spentDate        DateTime       @default(now())
  createdAt        DateTime       @default(now())
}

model User {
  id        Int            @id @default(autoincrement())
  email     String         @unique
  username  String         @unique
  password  String?        // Nullable for OAuth users
  provider  String         @default("local") // 'local' or 'google'
  providerId String?       @unique // Google user id
  companyId Int?           // Made optional for existing users
  company   Company?       @relation(fields: [companyId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  notifications  Notification[]
  projects       Project[]
}
